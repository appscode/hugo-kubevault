<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vault Unsealer on Tools for running HashiCorp Vault on Kubernetes</title><link>https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/</link><description>Recent content in Vault Unsealer on Tools for running HashiCorp Vault on Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS KMS | Vault Unsealer</title><link>https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/aws_kms_ssm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/aws_kms_ssm/</guid><description>New to KubeVault? Please start here.
mode.awsKmsSsm To use awsKmsSsm mode specify mode.awsKmsSsm. In this mode, unseal keys and root token will be stored in AWS System Manager Parameter store and they will be encrypted using AWS encryption key.
spec: unsealer: mode: awsKmsSsm: kmsKeyID: &amp;lt;key_id&amp;gt; region: &amp;lt;region&amp;gt; credentialSecret: &amp;lt;secret_name&amp;gt; mode.awsKmsSsm has following field:
awsKmsSsm.kmsKeyID awsKmsSsm.kmsKeyID is a required field that specifies the ID or ARN of the AWS KMS key to encrypt values.</description></item><item><title>Azure Key Vault | Vault Unsealer</title><link>https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/azure_key_vault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/azure_key_vault/</guid><description>New to KubeVault? Please start here.
mode.azureKeyVault To use azureKeyVault mode specify mode.azureKeyVault. In this mode, unseal keys and root token will be stored in Azure Key Vault as secret.
spec: unsealer: mode: azureKeyVault: vaultBaseUrl: &amp;lt;vault_base_url&amp;gt; tenantID: &amp;lt;tenant_id&amp;gt; clientCertSecret: &amp;lt;secret_name&amp;gt; aadClientSecret: &amp;lt;secret_name useManagedIdentity: &amp;lt;true/false&amp;gt; cloud: &amp;lt;cloud_environment_identifier&amp;gt; mode.azureKeyVault has following field:
azureKeyVault.vaultBaseUrl azureKeyVault.vaultBaseUrl is a required field that specifies Azure key vault url.
spec: unsealer: mode: azureKeyVault: vaultBaseUrl: &amp;quot;https://myvault.</description></item><item><title>Google Cloud KMS | Vault Unsealer</title><link>https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/google_kms_gcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/google_kms_gcs/</guid><description>New to KubeVault? Please start here.
mode.googleKmsGcs To use googleKmsGcs mode specify mode.googleKmsGcs. In this mode, unseal keys and root token will be stored in Google Cloud Storage and they will be encrypted using google cryptographic keys.
spec: unsealer: mode: googleKmsGcs: bucket: &amp;lt;bucket_name&amp;gt; kmsProject: &amp;lt;project_name&amp;gt; kmsLocation: &amp;lt;location&amp;gt; kmsKeyRing: &amp;lt;key_ring_name&amp;gt; kmsCryptoKey: &amp;lt;crypto_key_name&amp;gt; credentialSecret: &amp;lt;secret_name&amp;gt; mode.googleKmsGcs has following field:
googleKmsGcs.bucket googleKmsGcs.bucket is a required field that specifies the name of the bucket to store keys.</description></item><item><title>Kubernetes Secret | Vault Unsealer</title><link>https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/kubernetes_secret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/kubernetes_secret/</guid><description>New to KubeVault? Please start here.
mode.kubernetesSecret To use kubernetesSecret mode specify mode.kubernetesSecret. In this mode, unseal keys and root token will be stored in Kubernetes secret.
spec: unsealer: mode: kubernetesSecret: secretName: &amp;lt;secret_name&amp;gt; mode.kubernetesSecret has following field:
kubernetesSecret.secretName kubernetesSecret.secretName is a required field that specifies the name of Kubernetes secret. If this secret does not exist, then Unsealer will create it. The secret will be created in the same namespace of VaultServer.</description></item><item><title>Unsealer Unsealer</title><link>https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/unsealer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubedb.com/docs/0.1.0/concepts/vault-server-crds/unsealer/unsealer/</guid><description>New to KubeVault? Please start here.
Unsealer Unsealer automates the process of initializing and unsealing Vault running in Kubernetes cluster. Also it provides facilities to store unseal keys and root token in a secure way.
spec.unsealer To use Unsealer specify spec.unsealer in VaultServer CRD .
spec: unsealer: secretShares: &amp;lt;num_of_secret_shares&amp;gt; secretThresold: &amp;lt;num_of_secret_threshold&amp;gt; retryPeriodSeconds: &amp;lt;retry_period&amp;gt; overwriteExisting: &amp;lt;true/false&amp;gt; mode: ... unsealer.secretShares unsealer.secretShares is an optional field that specifies the number of shares to split the master key into.</description></item></channel></rss>