<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vault Server Storage on Tools for running HashiCorp Vault on Kubernetes</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/</link><description>Recent content in Vault Server Storage on Tools for running HashiCorp Vault on Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS S3 | Vault Server Storage</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/s3/</guid><description>New to KubeVault? Please start here.
AWS S3 In S3 storage backend, Vault data will be stored in AWS S3 bucket. Vault documentation for S3 storage can be found in here.
apiVersion: kubevault.com/v1alpha1 kind: VaultServer metadata: name: vault-with-s3 namespace: demo spec: replicas: 1 version: &amp;#34;1.2.0&amp;#34; backend: s3: bucket: &amp;#34;my-vault-bucket&amp;#34; region: &amp;#34;us-west-1&amp;#34; credentialSecret: &amp;#34;aws-credential&amp;#34; spec.backend.s3 To use S3 as backend storage in Vault specify spec.backend.s3 in VaultServer CRD.
spec: backend: s3: bucket: &amp;lt;bucket_name&amp;gt; endpoint: &amp;lt;end_point&amp;gt; region: &amp;lt;region&amp;gt; credentialSecret: &amp;lt;credential_secret_name&amp;gt; sessionTokenSecret: &amp;lt;session_secret_name&amp;gt; maxParallel: &amp;lt;max_parallel&amp;gt; forcePathStyle: &amp;lt;true/false&amp;gt; disableSSL: &amp;lt;true/false&amp;gt; Here, we are going to describe the various attributes of the spec.</description></item><item><title>Azure | Vault Server Storage</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/azure/</guid><description>New to KubeVault? Please start here.
Azure In Azure storage backend, Vault data will be stored in Azure Storage Container. Vault documentation for azure storage can be found in here.
apiVersion: kubevault.com/v1alpha1 kind: VaultServer metadata: name: vault-with-azure namespace: demo spec: replicas: 1 version: &amp;#34;1.2.0&amp;#34; backend: azure: accountName: &amp;#34;vault-ac&amp;#34; accountKeySecret: &amp;#34;azure-cred&amp;#34; container: &amp;#34;my-vault-storage&amp;#34; spec.backend.azure To use Azure as backend storage in Vault specify spec.backend.azure in VaultServer CRD.
spec: backend: azure: accountName: &amp;lt;storage_account_name&amp;gt; accountKeySecret: &amp;lt;storage_account_key_secret_name&amp;gt; container: &amp;lt;container_name&amp;gt; maxParallel: &amp;lt;max_parallel&amp;gt; Here, we are going to describe the various attributes of the spec.</description></item><item><title>Consul | Vault Server Storage</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/consul/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/consul/</guid><description>New to KubeVault? Please start here.
Consul In the Consul storage backend, Vault data will be stored in the consul storage container. Vault documentation for Consul storage backend can be found in here
apiVersion: kubevault.com/v1alpha1 kind: VaultServer metadata: name: vault namespace: demo spec: replicas: 1 version: &amp;#34;1.0.1&amp;#34; serviceTemplate: spec: type: NodePort backend: consul: address: &amp;#34;http://my-service.demo.svc:8500&amp;#34; path: &amp;#34;vault&amp;#34; configSource: configMap: name: extra-config unsealer: secretShares: 4 secretThreshold: 2 mode: kubernetesSecret: secretName: vault-keys If you need to disable the server from executing the mlock syscall, you can provide disable_mlock in a ConfigMap and mention the name in spec.</description></item><item><title>Dynamodb | Vault Server Storage</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/dynamodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/dynamodb/</guid><description>New to KubeVault? Please start here.
DynamoDB In DynamoDB storage backend, Vault data will be stored in DynamoDB. Vault documentation for DynamoDB storage can be found in here.
apiVersion: kubevault.com/v1alpha1 kind: VaultServer metadata: name: vault-with-dynamoDB namespace: demo spec: replicas: 1 version: &amp;#34;1.2.0&amp;#34; backend: dynamodb: table: &amp;#34;my-vault-table&amp;#34; region: &amp;#34;us-west-1&amp;#34; readCapacity: 5 writeCapacity: 5 spec.backend.dynamodb To use dynamoDB as backend storage in Vault specify spec.backend.dynamodb in VaultServer CRD.
spec: backend: dynamodb: table: &amp;lt;table_name&amp;gt; region: &amp;lt;region&amp;gt; endpoint: &amp;lt;endpoint&amp;gt; haEnabled: &amp;lt;true/false&amp;gt; readCapacity: &amp;lt;read_capacity&amp;gt; writeCapacity: &amp;lt;write_capacity&amp;gt; credentialSecret: &amp;lt;secret_name&amp;gt; sessionTokenSecret: &amp;lt;secret_name&amp;gt; maxParallel: &amp;lt;max_parallel&amp;gt; Here, we are going to describe the various attributes of the spec.</description></item><item><title>Etcd | Vault Server Storage</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/etcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/etcd/</guid><description>New to KubeVault? Please start here.
Etcd In Etcd storage backend, Vault data will be stored in Etcd. Vault documentation for Etcd storage can be found in here.
apiVersion: kubevault.com/v1alpha1 kind: VaultServer metadata: name: vault-with-etcd namespace: demo spec: replicas: 1 version: &amp;#34;1.2.0&amp;#34; backend: etcd: address: &amp;#34;http://example.etcd.svc:2379&amp;#34; etcdApi: &amp;#34;v3&amp;#34; spec.backend.etcd To use Etcd as storage backend in Vault specify spec.backend.etcd in VaultServer CRD.
spec: backend: etcd: address: &amp;#34;http://example.etcd.svc:2379&amp;#34; etcdApi: &amp;#34;v3&amp;#34; Here, we are going to describe the various attributes of the spec.</description></item><item><title>Filesystem | Vault Server Storage</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/filesystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/filesystem/</guid><description>New to KubeVault? Please start here.
Filesystem The Filesystem storage backend stores Vault data on the filesystem using a standard directory structure. As the Filesystem backend does not support high availability (HA), it can be used for single node setups(i.e. vaultserver.spec.replicas: 1). A VolumeClaimTemplate can be specified to create (or reuse if already exist) a PersistentVolumeClaim so that Vault data can be stored in the corresponding PersistentVolume.
apiVersion: kubevault.</description></item><item><title>GCS | Vault Server Storage</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/gcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/gcs/</guid><description>New to KubeVault? Please start here.
Google Cloud Storage (GCS) In Google Cloud Storage (GCS) storage backend, Vault data will be stored in Google Cloud Storage. Vault documentation for GCS storage can be found in here.
apiVersion: kubevault.com/v1alpha1 kind: VaultServer metadata: name: vault-with-gcs namespace: demo spec: replicas: 1 version: &amp;#34;1.2.0&amp;#34; backend: gcs: bucket: &amp;#34;my-vault-storage&amp;#34; credentialSecret: &amp;#34;my-gcs-credential&amp;#34; spec.backend.gcs To use GCS as backend storage in Vault specify spec.backend.gcs in VaultServer CRD.</description></item><item><title>In Memory | Vault Server Storage</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/inmem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/inmem/</guid><description>New to KubeVault? Please start here.
In-Memory In In-Memory backend storage, Vault data will be kept in memory. If the Kubernetes pod on which Vault is running is restarted, then all data will be lost. This is useful for development and experimentation, but the use of this backend is highly discouraged in production. Vault documentation for In-Memory storage can be found in here.
apiVersion: kubevault.com/v1alpha1 kind: VaultServer metadata: name: vault-with-inmem namespace: demo spec: replicas: 1 version: &amp;#34;1.</description></item><item><title>MySQL | Vault Server Storage</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/mysql/</guid><description>New to KubeVault? Please start here.
MySQL In MySQL storage backend, Vault data will be stored in MySQL. Vault documentation for MySQL storage can be found in here.
apiVersion: kubevault.com/v1alpha1 kind: VaultServer metadata: name: vault-with-mysql namespace: demo spec: replicas: 1 version: &amp;#34;1.2.0&amp;#34; backend: mysql: address: &amp;#34;my.mysql.com:3306&amp;#34; userCredentialSecret: &amp;#34;mysql-cred&amp;#34; spec.backend.mysql To use MySQL as backend storage in Vault, specify spec.backend.mysql in VaultServer CRD.
spec: backend: mysql: address: &amp;lt;address&amp;gt; database: &amp;lt;database_name&amp;gt; table: &amp;lt;table_name&amp;gt; userCredentialSecret: &amp;lt;secret_name&amp;gt; tlsCASecret: &amp;lt;secret_name&amp;gt; maxParallel: &amp;lt;max_parallel&amp;gt; Here, we are going to describe the various attributes of the spec.</description></item><item><title>OpenStack Swift | Vault Server Storage</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/swift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/swift/</guid><description>New to KubeVault? Please start here.
Swift In Swift storage backend, Vault data will be stored in OpenStack Swift Container. Vault documentation for Swift storage can be found in here.
apiVersion: kubevault.com/v1alpha1 kind: VaultServer metadata: name: vault-with-swift namespace: demo spec: replicas: 1 version: &amp;#34;1.2.0&amp;#34; backend: swift: authURL: &amp;#34;https://auth.cloud.ovh.net/v2.0/&amp;#34; container: &amp;#34;my-vault-container&amp;#34; credentialSecret: &amp;#34;os-credential&amp;#34; region: &amp;#34;BHS1&amp;#34; tenant: &amp;#34;123456789999&amp;#34; spec.backend.swift To use Swift as backend storage in Vault specify spec.backend.swift in VaultServer CRD.</description></item><item><title>PostgreSQL | Vault Server Storage</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/postgresql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/concepts/vault-server-crds/storage/postgresql/</guid><description>New to KubeVault? Please start here.
PostgreSQL In PostgreSQL storage backend, Vault data will be stored in PostgreSQL. Vault documentation for PostgreSQL storage can be found in here.
apiVersion: kubevault.com/v1alpha1 kind: VaultServer metadata: name: vault-with-postgreSQL namespace: demo spec: replicas: 1 version: &amp;#34;1.2.0&amp;#34; backend: postgresql: connectionURLSecret: &amp;#34;my-postgres-conn&amp;#34; spec.backend.postgresql To use PostgreSQL as backend storage in Vault specify spec.backend.postgresql in VaultServer CRD.
spec: backend: postgresql: connectionURLSecret: &amp;lt;secret_name&amp;gt; table: &amp;lt;table_name&amp;gt; maxParallel: &amp;lt;max_parallel&amp;gt; Here, we are going to describe the various attributes of the spec.</description></item></channel></rss>