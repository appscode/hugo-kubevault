<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GCP | Vault Secret Engine on Tools for running HashiCorp Vault on Kubernetes</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/guides/secret-engines/gcp/</link><description>Recent content in GCP | Vault Secret Engine on Tools for running HashiCorp Vault on Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kubevault.com/docs/v2020.07.09-beta.0/guides/secret-engines/gcp/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage GCP IAM Secrets using the KubeVault operator</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/guides/secret-engines/gcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/guides/secret-engines/gcp/overview/</guid><description>New to KubeVault? Please start here.
Manage GCP IAM Secrets using the KubeVault operator The Google Cloud Vault secrets engine dynamically generates Google Cloud service account keys and OAuth tokens based on IAM policies. This enables users to gain access to Google Cloud resources without needing to create or manage a dedicated service account. You can easily manage GCP secret engine using the KubeVault operator.
You need to be familiar with the following CRDs:</description></item><item><title>Mount GCP Secrets using CSI Driver</title><link>https://kubevault.com/docs/v2020.07.09-beta.0/guides/secret-engines/gcp/csi-driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v2020.07.09-beta.0/guides/secret-engines/gcp/csi-driver/</guid><description>New to KubeVault? Please start here.
Mount GCP Secrets using CSI Driver At first, you need to have a Kubernetes 1.14 or later cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using kind. To check the version of your cluster, run:
$ kubectl version --short Client Version: v1.16.2 Server Version: v1.</description></item></channel></rss>