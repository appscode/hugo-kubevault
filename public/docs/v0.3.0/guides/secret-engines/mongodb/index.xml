<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MongoDB | Vault Secret Engine on Tools for running HashiCorp Vault on Kubernetes</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/mongodb/</link><description>Recent content in MongoDB | Vault Secret Engine on Tools for running HashiCorp Vault on Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kubevault.com/docs/v0.3.0/guides/secret-engines/mongodb/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage MongoDB credentials using the KubeVault operator</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/mongodb/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v0.3.0/guides/secret-engines/mongodb/overview/</guid><description>New to KubeVault? Please start here.
Manage MongoDB credentials using the KubeVault operator MongoDB is one of the supported plugins for the database secrets engine. This plugin generates database credentials dynamically based on configured roles for the MongoDB database. You can easily manage MongoDB secret engine using the KubeVault operator.
You need to be familiar with the following CRDs:
AppBinding SecretEngine MongoDBRole DatabaseAccessRequest Before you begin Install KubeVault operator in your cluster from here.</description></item><item><title>Mount MongoDB credentials using CSI Driver</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/mongodb/csi-driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v0.3.0/guides/secret-engines/mongodb/csi-driver/</guid><description>New to KubeVault? Please start here.
Mount MongoDB credentials using CSI Driver At first, you need to have a Kubernetes 1.14 or later cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using kind. To check the version of your cluster, run:
$ kubectl version --short Client Version: v1.16.2 Server Version: v1.</description></item></channel></rss>