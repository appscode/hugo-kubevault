<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Key/Value | Vault Secret Engine on Tools for running HashiCorp Vault on Kubernetes</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/kv/</link><description>Recent content in Key/Value | Vault Secret Engine on Tools for running HashiCorp Vault on Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kubevault.com/docs/v0.3.0/guides/secret-engines/kv/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage Key/Value Secrets using the KubeVault operator</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/kv/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v0.3.0/guides/secret-engines/kv/overview/</guid><description>New to KubeVault? Please start here.
Manage Key/Value Secrets using the KubeVault operator You can easily manage KV secret engine using the KubeVault operator.
You should be familiar with the following CRD:
VaultPolicy VaultPolicyBinding AppBinding Before you begin Install KubeVault operator in your cluster from here. To keep things isolated, we are going to use a separate namespace called demo throughout this tutorial.
$ kubectl create ns demo namespace/demo created In this tutorial, we are going to demonstrate the use of the KV secret engine.</description></item><item><title>Mount Key/Value Secrets using CSI Driver</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/kv/csi-driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v0.3.0/guides/secret-engines/kv/csi-driver/</guid><description>New to KubeVault? Please start here.
Mount Key/Value Secrets using CSI Driver At first, you need to have a Kubernetes 1.14 or later cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using kind. To check the version of your cluster, run:
$ kubectl version --short Client Version: v1.16.2 Server Version: v1.</description></item></channel></rss>