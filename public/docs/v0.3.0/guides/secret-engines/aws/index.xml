<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS | Vault Secret Engine on Tools for running HashiCorp Vault on Kubernetes</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/aws/</link><description>Recent content in AWS | Vault Secret Engine on Tools for running HashiCorp Vault on Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kubevault.com/docs/v0.3.0/guides/secret-engines/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage AWS IAM Secrets using the KubeVault operator</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/aws/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v0.3.0/guides/secret-engines/aws/overview/</guid><description>New to KubeVault? Please start here.
Manage AWS IAM Secrets using the KubeVault operator The AWS secrets engine generates AWS access credentials dynamically based on IAM policies. The AWS IAM credentials are time-based and are automatically revoked when the Vault lease expires. You can easily manage the AWS secret engine using KubeVault operator.
You need to be familiar with the following CRDs:
AppBinding SecretEngine AWSRole AWSAccessKeyRequest Before you begin Install KubeVault operator in your cluster from here.</description></item><item><title>Mount AWS IAM Secrets using CSI Driver</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/aws/csi-driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v0.3.0/guides/secret-engines/aws/csi-driver/</guid><description>New to KubeVault? Please start here.
Mount AWS IAM Secrets using CSI Driver At first, you need to have a Kubernetes 1.14 or later cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using kind. To check the version of your cluster, run:
$ kubectl version --short Client Version: v1.16.2 Server Version: v1.</description></item></channel></rss>