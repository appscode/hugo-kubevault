<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MySQL | Vault Secret Engine on Tools for running HashiCorp Vault on Kubernetes</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/mysql/</link><description>Recent content in MySQL | Vault Secret Engine on Tools for running HashiCorp Vault on Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kubevault.com/docs/v0.3.0/guides/secret-engines/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage MySQL/MariaDB credentials using the KubeVault operator</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/mysql/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v0.3.0/guides/secret-engines/mysql/overview/</guid><description>New to KubeVault? Please start here.
Manage MySQL/MariaDB credentials using the KubeVault operator MySQL is one of the supported plugins for the database secrets engine. This plugin generates database credentials dynamically based on configured roles for the MySQL database, and also supports Static Roles. You can easily manage MySQL Database secret engine using the KubeVault operator.
You need to be familiar with the following CRDs:
AppBinding SecretEngine MySQLRole DatabaseAccessRequest Before you begin Install KubeVault operator in your cluster from here.</description></item><item><title>Mount MySQL/MariaDB credentials using CSI Driver</title><link>https://kubevault.com/docs/v0.3.0/guides/secret-engines/mysql/csi-driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kubevault.com/docs/v0.3.0/guides/secret-engines/mysql/csi-driver/</guid><description>New to KubeVault? Please start here.
Mount MySQL/MariaDB credentials using CSI Driver At first, you need to have a Kubernetes 1.14 or later cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using kind. To check the version of your cluster, run:
$ kubectl version --short Client Version: v1.16.2 Server Version: v1.</description></item></channel></rss>